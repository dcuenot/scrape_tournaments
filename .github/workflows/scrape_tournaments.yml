name: Scrape Tournaments

on:
  schedule:
    - cron: '0 0 * * *'  # Runs at 00:00 UTC every day
  workflow_dispatch:  # Allows manual trigger

jobs:
  scrape:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run scraper
      id: scrape
      run: |
        set +e
        python scrape_tournaments.py
        exit_code=$?
        set -e
        [ $exit_code -eq 2 ] && echo "new_tournaments=true" >> $GITHUB_OUTPUT && exit 0
        exit $exit_code
    
    - name: Commit and push if changed
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add csv/*.csv
        git diff --quiet && git diff --staged --quiet || (git commit -m "Update tournament data [skip ci]" && git push)
    
    - name: Prepare message content
      if: steps.scrape.outputs.new_tournaments == 'true'
      id: message
      run: |
        echo "🏓 *NOUVEAUX TOURNOIS DISPONIBLES* 🏓" > message.txt
        echo "" >> message.txt
        echo "Voici les nouveaux tournois ajoutés :" >> message.txt
        echo "" >> message.txt
        
        # Read CSV and format each tournament
        while IFS=, read -r id name startDate endDate type postalCode location rules; do
          # Skip header line
          if [ "$id" != "id" ]; then
            # Format dates
            startDate=$(date -d "$startDate" +"%d/%m/%Y")
            endDate=$(date -d "$endDate" +"%d/%m/%Y")
            
            # Format tournament type
            case $type in
              "B") type="National B" ;;
              "I") type="International" ;;
              "R") type="Régional" ;;
              "D") type="Départemental" ;;
              "P") type="Promotion" ;;
              *) type=$type ;;
            esac
            
            # Add tournament info
            echo "🏆 *$name*" >> message.txt
            echo "📅 Du $startDate au $endDate" >> message.txt
            echo "📍 $location ($postalCode)" >> message.txt
            echo "🏅 Type: $type" >> message.txt
            if [ ! -z "$rules" ]; then
              echo "📄 Règlement: $rules" >> message.txt
            fi
            echo "" >> message.txt
          fi
        done < csv/new_tournaments.csv
        
        echo "content<<EOF" >> $GITHUB_ENV
        cat message.txt >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
    
    - name: Send email
      if: steps.scrape.outputs.new_tournaments == 'true'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "Nouveaux tournois disponibles"
        body: ${{ env.content }}
        to: damsvdf@yahoo.fr
        from: ${{ secrets.EMAIL_USERNAME }}
    
    - name: Send WhatsApp message
      if: steps.scrape.outputs.new_tournaments == 'true'
      run: |
        # Create JSON payload
        message=$(cat message.txt | jq -Rs .)
        echo "{
          \"messaging_product\": \"whatsapp\",
          \"to\": \"${{ secrets.WHATSAPP_RECIPIENT_NUMBER }}\",
          \"type\": \"text\",
          \"text\": {
            \"body\": $message
          }
        }" > payload.json
        
        # Send the message
        curl -X POST "https://graph.facebook.com/v17.0/${{ secrets.WHATSAPP_PHONE_NUMBER_ID }}/messages" \
          -H "Authorization: Bearer ${{ secrets.WHATSAPP_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d @payload.json